/* Develop a program that allows a teacher to enter
students' grades and compute their average,
highest, and lowest scores. You can use arrays or
ArrayLists to store the student data. */



import java.util.ArrayList;
import java.util.Scanner;

public class StudentGrade{
 public static void main(String[] args) {
Scanner A = new Scanner(System.in);
ArrayList<Double> grades = new ArrayList<>();
String input;
System.out.println("Enter student grades (type 'done' to finish):");
while (true) {
System.out.print("Enter grade: ");
input = A.nextLine();
if (input.equalsIgnoreCase("done")) {
break; 
}
try {
double grade = Double.parseDouble(input); 
if (grade < 0 || grade > 100) {
System.out.println("Please enter a grade between 0 and 100.");
} else {
grades.add(grade); 
}
} catch (NumberFormatException e) {
System.out.println("Invalid input. Please enter a numeric grade."); 
}
}
if (grades.size() > 0) {
double sum = 0;
double highest = grades.get(0);
double lowest = grades.get(0);
for (double grade : grades) {
sum += grade; 
if (grade > highest) {
highest = grade; 
}
if (grade < lowest) {
lowest = grade; 
}
}
double average = sum / grades.size(); 
System.out.printf("Average grade: %.2f%n", average);
System.out.printf("Highest grade: %.2f%n", highest);
System.out.printf("Lowest grade: %.2f%n", lowest);
} else {
System.out.println("No grades were entered.");
}
A.close(); 
}
}
// task 2
import java.util.*;
class Stock {
private String symbol;
private String name;
private double price;
public Stock(String symbol, String name, double price) {
this.symbol = symbol;
this.name = name;
this.price = price;
}
public String getSymbol() {
return symbol;
 }
public String getName() {
 return name;
    }

 public double getPrice() {
   return price;
    }

 public void setPrice(double price) {
        this.price = price;
    }

    @Override
    public String toString() {
        return String.format("%s (%s): $%.2f", name, symbol, price);
    }
}

// Portfolio class to manage user's stock holdings
class Portfolio {
    private Map<Stock, Integer> holdings;

    public Portfolio() {
        holdings = new HashMap<>();
    }

    public void addStock(Stock stock, int quantity) {
        holdings.put(stock, holdings.getOrDefault(stock, 0) + quantity);
    }

    public void removeStock(Stock stock, int quantity) {
        if (holdings.containsKey(stock)) {
            int currentQuantity = holdings.get(stock);
            if (currentQuantity <= quantity) {
                holdings.remove(stock);
            } else {
                holdings.put(stock, currentQuantity - quantity);
            }
        }
    }

    public double getPortfolioValue() {
        double totalValue = 0;
        for (Map.Entry<Stock, Integer> entry : holdings.entrySet()) {
            totalValue += entry.getKey().getPrice() * entry.getValue();
        }
        return totalValue;
    }

    public void displayPortfolio() {
        System.out.println("Portfolio:");
        for (Map.Entry<Stock, Integer> entry : holdings.entrySet()) {
            System.out.println(entry.getKey() + " - Quantity: " + entry.getValue());
        }
        System.out.println("Total Portfolio Value: $" + getPortfolioValue());
    }

    public Map<Stock, Integer> getHoldings() {
        return holdings;
    }
}

// MarketSimulator class to simulate stock price changes
class MarketSimulator {
    private List<Stock> stocks;
    private Random random;

    public MarketSimulator() {
        stocks = new ArrayList<>();
        random = new Random();
    }

    public void addStock(Stock stock) {
        stocks.add(stock);
    }

    public void simulateMarket() {
        for (Stock stock : stocks) {
            double priceChange = (random.nextDouble() - 0.5) * 10; // Random price change between -5 and +5
            double newPrice = stock.getPrice() + priceChange;
            stock.setPrice(Math.max(newPrice, 0)); // Ensure price doesn't go negative
        }
    }

    public void displayMarket() {
        System.out.println("Market Data:");
        for (Stock stock : stocks) {
            System.out.println(stock);
        }
    }

    public List<Stock> getStocks() {
        return stocks;
    }
}

// TradingPlatform class to provide the user interface
class TradingPlatform {
    private MarketSimulator marketSimulator;
    private Portfolio portfolio;
    private Scanner scanner;

    public TradingPlatform() {
        marketSimulator = new MarketSimulator();
        portfolio = new Portfolio();
        scanner = new Scanner(System.in);
    }

    public void start() {
        // Add some initial stocks to the market
        marketSimulator.addStock(new Stock("AAPL", "Apple Inc.", 150.0));
        marketSimulator.addStock(new Stock("GOOGL", "Alphabet Inc.", 2800.0));
        marketSimulator.addStock(new Stock("AMZN", "Amazon.com Inc.", 3400.0));

        while (true) {
            System.out.println("\n1. View Market Data");
            System.out.println("2. Buy Stocks");
            System.out.println("3. Sell Stocks");
            System.out.println("4. View Portfolio");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    marketSimulator.simulateMarket();
                    marketSimulator.displayMarket();
                    break;
                case 2:
                    buyStocks();
                    break;
                case 3:
                    sellStocks();
                    break;
                case 4:
                    portfolio.displayPortfolio();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private void buyStocks() {
        marketSimulator.displayMarket();
        System.out.print("Enter the stock symbol to buy: ");
        String symbol = scanner.next();
        System.out.print("Enter the quantity to buy: ");
        int quantity = scanner.nextInt();

        for (Stock stock : marketSimulator.getStocks()) {
            if (stock.getSymbol().equalsIgnoreCase(symbol)) {
                portfolio.addStock(stock, quantity);
                System.out.println("Bought " + quantity + " shares of " + stock.getName());
                return;
            }
        }
        System.out.println("Stock not found.");
    }

    private void sellStocks() {
        portfolio.displayPortfolio();
        System.out.print("Enter the stock symbol to sell: ");
        String symbol = scanner.next();
        System.out.print("Enter the quantity to sell: ");
        int quantity = scanner.nextInt();

        for (Stock stock : portfolio.getHoldings().keySet()) {
            if (stock.getSymbol().equalsIgnoreCase(symbol)) {
                portfolio.removeStock(stock, quantity);
                System.out.println("Sold " + quantity + " shares of " + stock.getName());
                return;
            }
        }
        System.out.println("Stock not found in portfolio.");
    }
}

// Main class to run the program
public class StockTradingPlatform {
    public static void main(String[] args) {
        TradingPlatform platform = new TradingPlatform();
        platform.start();
    }
}

// task 3
import java.util.*;

// Room class representing a hotel room
class Room {
    private int roomNumber;
    private String category;
    private double price;
    private boolean isAvailable;

    public Room(int roomNumber, String category, double price) {
        this.roomNumber = roomNumber;
        this.category = category;
        this.price = price;
        this.isAvailable = true;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public String getCategory() {
        return category;
    }

    public double getPrice() {
        return price;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    @Override
    public String toString() {
        return String.format("Room %d (%s): $%.2f per night", roomNumber, category, price);
    }
}

// Reservation class representing a booking
class Reservation {
    private String guestName;
    private Room room;
    private int nights;
    private double totalCost;

    public Reservation(String guestName, Room room, int nights) {
        this.guestName = guestName;
        this.room = room;
        this.nights = nights;
        this.totalCost = room.getPrice() * nights;
    }

    public String getGuestName() {
        return guestName;
    }

    public Room getRoom() {
        return room;
    }

    public int getNights() {
        return nights;
    }

    public double getTotalCost() {
        return totalCost;
    }

    @Override
    public String toString() {
        return String.format("Reservation for %s: %s, %d nights, Total Cost: $%.2f",
                guestName, room, nights, totalCost);
    }
}

// Hotel class to manage rooms and reservations
class Hotel {
    private List<Room> rooms;
    private List<Reservation> reservations;

    public Hotel() {
        rooms = new ArrayList<>();
        reservations = new ArrayList<>();
        initializeRooms();
    }

    private void initializeRooms() {
        // Add some rooms to the hotel
        rooms.add(new Room(101, "Standard", 100.0));
        rooms.add(new Room(102, "Standard", 100.0));
        rooms.add(new Room(201, "Deluxe", 150.0));
        rooms.add(new Room(202, "Deluxe", 150.0));
        rooms.add(new Room(301, "Suite", 250.0));
        rooms.add(new Room(302, "Suite", 250.0));
    }

    public List<Room> searchAvailableRooms(String category) {
        List<Room> availableRooms = new ArrayList<>();
        for (Room room : rooms) {
            if (room.isAvailable() && (category == null || room.getCategory().equalsIgnoreCase(category))) {
                availableRooms.add(room);
            }
        }
        return availableRooms;
    }

    public boolean makeReservation(String guestName, int roomNumber, int nights) {
        for (Room room : rooms) {
            if (room.getRoomNumber() == roomNumber && room.isAvailable()) {
                room.setAvailable(false);
                Reservation reservation = new Reservation(guestName, room, nights);
                reservations.add(reservation);
                return true;
            }
        }
        return false;
    }

    public void displayReservations() {
        System.out.println("Current Reservations:");
        for (Reservation reservation : reservations) {
            System.out.println(reservation);
        }
    }

    public boolean processPayment(double amount, double totalCost) {
        return amount >= totalCost; // Simulate payment processing
    }
}

// HotelReservationSystem class to provide the user interface
class HotelReservationSystem {
    private Hotel hotel;
    private Scanner scanner;

    public HotelReservationSystem() {
        hotel = new Hotel();
        scanner = new Scanner(System.in);
    }

    public void start() {
        while (true) {
            System.out.println("\n1. Search for Available Rooms");
            System.out.println("2. Make a Reservation");
            System.out.println("3. View Reservations");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    searchRooms();
                    break;
                case 2:
                    makeReservation();
                    break;
                case 3:
                    hotel.displayReservations();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private void searchRooms() {
        System.out.print("Enter room category (Standard/Deluxe/Suite) or leave blank for all: ");
        String category = scanner.nextLine().trim();
        List<Room> availableRooms = hotel.searchAvailableRooms(category.isEmpty() ? null : category);

        if (availableRooms.isEmpty()) {
            System.out.println("No available rooms found.");
        } else {
            System.out.println("Available Rooms:");
            for (Room room : availableRooms) {
                System.out.println(room);
            }
        }
    }

    private void makeReservation() {
        System.out.print("Enter your name: ");
        String guestName = scanner.nextLine();
        System.out.print("Enter room number: ");
        int roomNumber = scanner.nextInt();
        System.out.print("Enter number of nights: ");
        int nights = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        if (hotel.makeReservation(guestName, roomNumber, nights)) {
            System.out.println("Reservation successful!");
            System.out.print("Enter payment amount: ");
            double paymentAmount = scanner.nextDouble();
            scanner.nextLine(); // Consume newline

            Reservation latestReservation = hotel.getReservations().get(hotel.getReservations().size() - 1);
            if (hotel.processPayment(paymentAmount, latestReservation.getTotalCost())) {
                System.out.println("Payment successful! Booking confirmed.");
            } else {
                System.out.println("Payment failed. Reservation canceled.");
                hotel.cancelReservation(latestReservation);
            }
        } else {
            System.out.println("Reservation failed. Room may be unavailable.");
        }
    }

    // Helper method to cancel a reservation
    private void cancelReservation(Reservation reservation) {
        reservation.getRoom().setAvailable(true);
        hotel.getReservations().remove(reservation);
    }
}

// Main class to run the program
public class Main {
    public static void main(String[] args) {
        HotelReservationSystem system = new HotelReservationSystem();
        system.start();
    }
}
